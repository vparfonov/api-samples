/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.palette.provider;

import java.util.List;
import javax.swing.Action;
import org.netbeans.api.settings.ConvertAsProperties;
import org.netbeans.spi.palette.PaletteActions;
import org.netbeans.spi.palette.PaletteFactory;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.filesystems.FileObject;
import org.openide.filesystems.FileUtil;
import org.openide.nodes.AbstractNode;
import org.openide.nodes.ChildFactory;
import org.openide.nodes.Children;
import org.openide.nodes.Node;
import org.openide.util.Lookup;
import org.openide.util.NbBundle.Messages;
import org.openide.util.lookup.Lookups;
import org.openide.windows.TopComponent;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//org.palette.provider//Visual//EN",
        autostore = false)
@TopComponent.Description(
        preferredID = "VisualTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE",
        persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "editor", openAtStartup = true)
@ActionID(category = "Window", id = "org.palette.provider.VisualTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_VisualAction",
        preferredID = "VisualTopComponent")
@Messages({
    "CTL_VisualAction=Visual",
    "CTL_VisualTopComponent=Visual Window",
    "HINT_VisualTopComponent=This is a Visual window"
})
public final class VisualTopComponent extends TopComponent {

    public VisualTopComponent() {
        initComponents();
        setName(Bundle.CTL_VisualTopComponent());
        setToolTipText(Bundle.HINT_VisualTopComponent());
        Node rootNode = new AbstractNode(Children.create(new ChildFactory<ChildFactory>() {
            @Override
            protected boolean createKeys(List<ChildFactory> toPopulate) {
                FileObject[] contribitons = FileUtil.getConfigFile("Contributions").getChildren();
                for (FileObject fileObject : contribitons) {
                    ChildFactory cf = FileUtil.getConfigObject(fileObject.getPath(), ChildFactory.class);
                    toPopulate.add(cf);
                }
                return true;
            }

            @Override
            protected Node createNodeForKey(ChildFactory key) {
                AbstractNode an = new AbstractNode(Children.create(key, true));
                an.setDisplayName(key.getClass().getSimpleName());
                return an;
            }
        }, false));

        associateLookup(Lookups.singleton(PaletteFactory.createPalette(rootNode, new PaletteActions() {
            @Override
            public Action[] getImportActions() {
                return null;
            }

            @Override
            public Action[] getCustomPaletteActions() {
                return null;
            }

            @Override
            public Action[] getCustomCategoryActions(Lookup category) {
                return null;
            }

            @Override
            public Action[] getCustomItemActions(Lookup item) {
                return null;
            }

            @Override
            public Action getPreferredAction(Lookup item) {
                return null;
            }
        })));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
}
