/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.customer.viewer;

import java.awt.BorderLayout;
import java.util.ArrayList;
import javax.swing.ActionMap;
import javax.swing.text.DefaultEditorKit;
import org.customer.domain.Customer;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.ExplorerUtils;
import org.openide.explorer.view.BeanTreeView;
import org.openide.nodes.AbstractNode;
import org.openide.nodes.Children;
import org.openide.nodes.Node;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//org.customer.viewer//Customer//EN",
autostore = false)
@TopComponent.Description(preferredID = "CustomerTopComponent",
//iconBase="SET/PATH/TO/ICON/HERE", 
persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "explorer", openAtStartup = true)
@ActionID(category = "Window", id = "org.customer.viewer.CustomerTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(displayName = "#CTL_CustomerAction",
preferredID = "CustomerTopComponent")
public final class CustomerTopComponent extends TopComponent implements ExplorerManager.Provider {

    private ExplorerManager em = new ExplorerManager();

    public CustomerTopComponent() {
        initComponents();
        setName(NbBundle.getMessage(CustomerTopComponent.class, "CTL_CustomerTopComponent"));
        setToolTipText(NbBundle.getMessage(CustomerTopComponent.class, "HINT_CustomerTopComponent"));
        
        setLayout(new BorderLayout());
        add(new BeanTreeView(), BorderLayout.CENTER);

        ArrayList<Customer> names = new ArrayList<Customer>();
        names.add(new Customer("Tom"));
        names.add(new Customer("Dick"));
        names.add(new Customer("Harry"));
        
        AbstractNode root1 = new DNDContainerNode(new CustomerList(names));
        root1.setDisplayName("D&D 1");

        ArrayList<Customer> names2 = new ArrayList<Customer>();
        names2.add(new Customer("Thomas"));
        names2.add(new Customer("Richard"));
        names2.add(new Customer("Harald"));
        AbstractNode root2 = new DNDContainerNode(new CustomerList(names2));
        root2.setDisplayName("D&D 2");

        AbstractNode root = new AbstractNode(new Children.Array());
        root.setDisplayName("Root");
        root.getChildren().add(new Node[]{root1, root2});
        em.setRootContext(root);

        ActionMap map = getActionMap();
        map.put(DefaultEditorKit.copyAction, ExplorerUtils.actionCopy(em)); // currently unused
        map.put(DefaultEditorKit.cutAction, ExplorerUtils.actionCut(em));
        map.put(DefaultEditorKit.pasteAction, ExplorerUtils.actionPaste(em));
        map.put("delete", ExplorerUtils.actionDelete(em, false));
        associateLookup(ExplorerUtils.createLookup(em, map));
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    public ExplorerManager getExplorerManager() {
        return em;
    }
    
}
