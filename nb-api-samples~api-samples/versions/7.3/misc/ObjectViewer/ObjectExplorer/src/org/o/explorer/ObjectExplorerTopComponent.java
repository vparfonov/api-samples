package org.o.explorer;

import java.awt.BorderLayout;
import java.beans.IntrospectionException;
import org.netbeans.api.settings.ConvertAsProperties;
import org.o.api.MyObject;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.ExplorerUtils;
import org.openide.explorer.view.BeanTreeView;
import org.openide.nodes.Node;
import org.openide.nodes.NodeAdapter;
import org.openide.nodes.NodeMemberEvent;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.TopComponent;

@ConvertAsProperties(
        dtd = "-//org.o.explorer//ObjectExplorer//EN",
        autostore = false)
@TopComponent.Description(
        preferredID = "ObjectExplorerTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE",
        persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "explorer", openAtStartup = true)
@ActionID(category = "Window", id = "org.o.explorer.ObjectExplorerTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_ObjectExplorerAction",
        preferredID = "ObjectExplorerTopComponent")
@Messages({
    "CTL_ObjectExplorerAction=ObjectExplorer",
    "CTL_ObjectExplorerTopComponent=ObjectExplorer Window",
    "HINT_ObjectExplorerTopComponent=This is a ObjectExplorer window"
})
public final class ObjectExplorerTopComponent extends TopComponent implements ExplorerManager.Provider {

    private ExplorerManager em = new ExplorerManager();
    private final BeanTreeView btv = new BeanTreeView();

    public ObjectExplorerTopComponent() throws IntrospectionException {
        initComponents();
        setName(Bundle.CTL_ObjectExplorerTopComponent());
        setToolTipText(Bundle.HINT_ObjectExplorerTopComponent());
        setLayout(new BorderLayout());
        ObjectNode rootNode = new ObjectNode(new MyObject("parent"));
        em.setRootContext(rootNode);
        rootNode.addNodeListener(new MyNodeListener());
        add(btv, BorderLayout.CENTER);
        associateLookup(ExplorerUtils.createLookup(em, getActionMap()));
    }

    private class MyNodeListener extends NodeAdapter {

        @Override
        public void childrenAdded(NodeMemberEvent ev) {
            Node[] delta = ev.getDelta();
            for (Node node : delta) {
                node.addNodeListener(this);
                btv.expandNode(node.getParentNode());
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    public ExplorerManager getExplorerManager() {
        return em;
    }
}
