package com.mycompany.cmsbackoffice2editor;

import com.mycompany.cmsbackoffice2domain.News;
import java.awt.BorderLayout;
import java.io.IOException;
import javax.swing.Action;
import javax.swing.JComponent;
import javax.swing.JEditorPane;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JToolBar;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.text.BadLocationException;
import javax.swing.text.Document;
import javax.swing.text.EditorKit;
import org.netbeans.api.editor.mimelookup.MimeLookup;
import org.netbeans.core.spi.multiview.CloseOperationState;
import org.netbeans.core.spi.multiview.MultiViewElement;
import org.netbeans.core.spi.multiview.MultiViewElementCallback;
import org.netbeans.editor.Utilities;
import org.netbeans.modules.csl.spi.GsfUtilities;
import org.netbeans.spi.actions.AbstractSavable;
import org.openide.awt.UndoRedo;
import org.openide.filesystems.FileObject;
import org.openide.filesystems.FileUtil;
import org.openide.text.NbDocument;
import org.openide.util.Exceptions;
import org.openide.util.Lookup;
import org.openide.util.lookup.InstanceContent;
import org.openide.windows.TopComponent;

@MultiViewElement.Registration(displayName = "General",
    mimeType = "application/x-surveynode",
    persistenceType = TopComponent.PERSISTENCE_NEVER,
    preferredID = "NewsNodeGeneralElement",
    position = 100)
public class GeneralTab extends JPanel implements MultiViewElement {

    private JToolBar toolbar = new JToolBar();
    private Lookup lkp;
    private JEditorPane editorPane;
    private InstanceContent ic;
    private News news;
    private FileObject dummyFile = null;

    /**
     * Creates new form GeneralTab
     */
    public GeneralTab(Lookup lkp) {
        initComponents();
        this.lkp = lkp;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        placeHolderPanel = new javax.swing.JPanel();
        toolbarPanel = new javax.swing.JPanel();

        jLabel1.setText("Description:");

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jLabel2.setText("JavaScript:");

        placeHolderPanel.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        placeHolderPanel.setLayout(new java.awt.BorderLayout());

        toolbarPanel.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        javax.swing.GroupLayout toolbarPanelLayout = new javax.swing.GroupLayout(toolbarPanel);
        toolbarPanel.setLayout(toolbarPanelLayout);
        toolbarPanelLayout.setHorizontalGroup(
            toolbarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        toolbarPanelLayout.setVerticalGroup(
            toolbarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 25, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(placeHolderPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(toolbarPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(toolbarPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(placeHolderPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 129, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JPanel placeHolderPanel;
    private javax.swing.JPanel toolbarPanel;
    // End of variables declaration//GEN-END:variables

    @Override
    public JComponent getVisualRepresentation() {
        return this;
    }

    @Override
    public JComponent getToolbarRepresentation() {
        return toolbar;
    }

    @Override
    public Action[] getActions() {
        return new Action[]{};
    }

    @Override
    public Lookup getLookup() {
        return lkp;
    }

    @Override
    public void componentOpened() {
    }

    @Override
    public void componentClosed() {
    }

    @Override
    public void componentShowing() {
        editorPane.updateUI();
    }

    private void addJSPane() {

        ic = lkp.lookup(InstanceContent.class);

        news = lkp.lookup(News.class);

        jTextArea1.setText(news.getDescription());

        editorPane = new JEditorPane();
        String mimeType = "text/javascript";

        try {
            if (dummyFile == null) {
                dummyFile = FileUtil.createMemoryFileSystem().getRoot().createData(news.getTitle()+".js");
            }
        } catch (IOException ex) {
            Exceptions.printStackTrace(ex);
        }

        Document doc = GsfUtilities.getDocument(dummyFile, true);

        editorPane.setContentType(mimeType);
        EditorKit kit = MimeLookup.getLookup(mimeType).lookup(EditorKit.class);
        editorPane.setEditorKit(kit);
        editorPane.setDocument(doc);
        editorPane.getDocument().putProperty("mimeType", mimeType);

        if (doc instanceof NbDocument.CustomEditor) {
            NbDocument.CustomEditor ce = (NbDocument.CustomEditor) doc;
            placeHolderPanel.add(ce.createEditor(editorPane), BorderLayout.CENTER);
        } else {
            placeHolderPanel.add(new JScrollPane(editorPane), BorderLayout.CENTER);
        }

        toolbarPanel.setLayout(new BorderLayout());
        toolbarPanel.add(Utilities.getEditorUI(editorPane).getToolBarComponent(), BorderLayout.CENTER);

        editorPane.getDocument().addUndoableEditListener(manager);

        editorPane.setText(news.getJavaScript());

        editorPane.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                modify();
            }
            @Override
            public void removeUpdate(DocumentEvent e) {
                modify();
            }
            @Override
            public void changedUpdate(DocumentEvent e) {
                modify();
            }
        });

        manager.discardAllEdits();

    }

    @Override
    public void componentHidden() {
    }

    @Override
    public void componentActivated() {
    }

    @Override
    public void componentDeactivated() {
    }
    private UndoRedo.Manager manager = new UndoRedo.Manager();

    @Override
    public UndoRedo getUndoRedo() {
        return manager;
    }

    @Override
    public void setMultiViewCallback(MultiViewElementCallback callback) {
        addJSPane();
        callback.getTopComponent().setDisplayName(news.getTitle());
    }

    @Override
    public CloseOperationState canCloseElement() {
        return CloseOperationState.STATE_OK;
    }

    private void modify() {
        if (getLookup().lookup(MySavable.class) == null) {
            ic.add(new MySavable());
        }
    }

    private class MySavable extends AbstractSavable {

        MySavable() {
            register();
        }

        @Override
        protected String findDisplayName() {
            try {
                final Document doc = editorPane.getDocument();
                String s = doc.getText(0, doc.getLength());
                int indx = s.indexOf('\n');
                if (indx >= 0) {
                    s = s.substring(0, indx);
                }
                return "First line: '" + s + "'";
            } catch (BadLocationException ex) {
                return ex.getLocalizedMessage();
            }
        }

        @Override
        protected void handleSave() throws IOException {
            JOptionPane.showMessageDialog(null, "do something with the changes...");
            tc().ic.remove(this);
            unregister();
        }

        GeneralTab tc() {
            return GeneralTab.this;
        }

        @Override
        public boolean equals(Object obj) {
            if (obj instanceof MySavable) {
                MySavable m = (MySavable) obj;
                return tc() == m.tc();
            }
            return false;
        }

        @Override
        public int hashCode() {
            return tc().hashCode();
        }
    }
}
