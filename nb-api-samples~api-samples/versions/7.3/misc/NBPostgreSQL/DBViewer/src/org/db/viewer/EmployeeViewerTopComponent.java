/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.db.viewer;

import java.awt.BorderLayout;
import java.beans.IntrospectionException;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.Persistence;
import javax.persistence.Query;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.ExplorerUtils;
import org.openide.explorer.view.BeanTreeView;
import org.openide.nodes.AbstractNode;
import org.openide.nodes.BeanNode;
import org.openide.nodes.ChildFactory;
import org.openide.nodes.Children;
import org.openide.nodes.Node;
import org.openide.util.Exceptions;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
    dtd = "-//org.db.viewer//EmployeeViewer//EN",
autostore = false)
@TopComponent.Description(
    preferredID = "EmployeeViewerTopComponent",
//iconBase="SET/PATH/TO/ICON/HERE", 
persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "explorer", openAtStartup = true)
@ActionID(category = "Window", id = "org.db.viewer.EmployeeViewerTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
    displayName = "#CTL_EmployeeViewerAction",
preferredID = "EmployeeViewerTopComponent")
@Messages({
    "CTL_EmployeeViewerAction=EmployeeViewer",
    "CTL_EmployeeViewerTopComponent=Employee Viewer",
    "HINT_EmployeeViewerTopComponent=This is a EmployeeViewer window"
})
public final class EmployeeViewerTopComponent extends TopComponent implements ExplorerManager.Provider {
    
    private ExplorerManager em = new ExplorerManager();

    public EmployeeViewerTopComponent() {
        
        initComponents();
        
        setName(Bundle.CTL_EmployeeViewerTopComponent());
        setToolTipText(Bundle.HINT_EmployeeViewerTopComponent());

        EntityManager entityManager = Persistence.createEntityManagerFactory("PostgreSQLLibPU").createEntityManager();
        final Query query = entityManager.createNamedQuery("Employees.findAll");
        
        setLayout(new BorderLayout());
        BeanTreeView btv = new BeanTreeView();
        btv.setRootVisible(false);
        add(btv, BorderLayout.CENTER);
        
        em.setRootContext(new AbstractNode(Children.create(new ChildFactory<Employees>() {
            @Override
            protected boolean createKeys(List list) {
                list.addAll(query.getResultList());
                return true;
            }
            @Override
            protected Node createNodeForKey(Employees key) {
                BeanNode empNode = null;
                try {
                    empNode = new BeanNode(key);
                    empNode.setDisplayName(key.getFirstName());
                } catch (IntrospectionException ex) {
                    Exceptions.printStackTrace(ex);
                }
                return empNode;
            }
        }, true)));
        
        associateLookup(ExplorerUtils.createLookup(em, getActionMap()));
        
//        for (Employees c : resultList) {
//            jTextArea1.append(c.getFirstName() + " " + c.getLastName() + "\n");
//        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables

    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    public ExplorerManager getExplorerManager() {
        return em;
    }
    
}
