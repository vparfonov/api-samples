/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package sv.text.history;

import java.util.Collection;
import org.openide.util.Lookup.Result;
import org.openide.util.LookupEvent;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.LookupListener;
import org.openide.util.Utilities;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//sv.text.history//TextHistory//EN",
autostore = false)
@TopComponent.Description(preferredID = "TextHistoryTopComponent",
//iconBase="SET/PATH/TO/ICON/HERE", 
persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "explorer", openAtStartup = true)
@ActionID(category = "Window", id = "sv.text.history.TextHistoryTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(displayName = "#CTL_TextHistoryAction",
preferredID = "TextHistoryTopComponent")
public final class TextHistoryTopComponent extends TopComponent implements LookupListener {

    public TextHistoryTopComponent() {
        initComponents();
        setName(NbBundle.getMessage(TextHistoryTopComponent.class, "CTL_TextHistoryTopComponent"));
        setToolTipText(NbBundle.getMessage(TextHistoryTopComponent.class, "HINT_TextHistoryTopComponent"));

    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
    
    Result<String> allStringsInSelectedWindow;
    
    @Override
    public void componentOpened() {
        //Return all the strings in the Lookup of the selected window:
        allStringsInSelectedWindow = 
                //Lookup.getCurrentlySelectedWindow
                Utilities.actionsGlobalContext().lookupResult(String.class);
        allStringsInSelectedWindow.addLookupListener(this);
        
    }

    @Override
    public void componentClosed() {
        allStringsInSelectedWindow.removeLookupListener(this);
    }
    
    
    @Override
    public void resultChanged(LookupEvent ev) {
        Collection<? extends String> allStrings =
                allStringsInSelectedWindow.allInstances();
        
        if (allStrings.isEmpty()){
            return;
        }
        
        StringBuilder sb = new StringBuilder();
        for (String string : allStrings) {
            sb.append(string).append("\n");
        }
        jTextArea1.setText(sb.toString());
    }
    
    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    
}
