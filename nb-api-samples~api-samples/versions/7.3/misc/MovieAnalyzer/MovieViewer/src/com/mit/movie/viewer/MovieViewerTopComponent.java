/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mit.movie.viewer;

import com.mit.movie.viewer.childfactories.MovieChildFactory;
import java.awt.BorderLayout;
import java.beans.PropertyVetoException;
import javax.swing.ActionMap;
import javax.swing.text.DefaultEditorKit;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.ExplorerUtils;
import org.openide.explorer.view.BeanTreeView;
import org.openide.nodes.AbstractNode;
import org.openide.nodes.Children;
import org.openide.nodes.Node;
import org.openide.util.Exceptions;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//com.mit.movie.viewer//MovieViewer//EN",
        autostore = false)
@TopComponent.Description(preferredID = "MovieViewerTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE",
        persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "explorer", openAtStartup = true)
@ActionID(category = "Window", id = "com.mit.movie.viewer.MovieViewerTopComponent")
@ActionReference(path = "Menu/Window" /*
         * , position = 333
         */)
@TopComponent.OpenActionRegistration(displayName = "#CTL_MovieViewerAction",
        preferredID = "MovieViewerTopComponent")
@Messages({
    "CTL_MovieViewerAction=Viewer",
    "CTL_MovieViewerTopComponent=Viewer"
})
public final class MovieViewerTopComponent extends TopComponent implements ExplorerManager.Provider {

    ExplorerManager controler = new ExplorerManager();

    public MovieViewerTopComponent() {

        initComponents();

        setName(Bundle.CTL_MovieViewerTopComponent());

        setLayout(new BorderLayout());

        Children movieChildren = Children.create(new MovieChildFactory(), true);
        Node rootNode = new AbstractNode(movieChildren);
        rootNode.setDisplayName("Movies");

        BeanTreeView movieViewer = new BeanTreeView();
        movieViewer.setRootVisible(false);
        add(movieViewer, BorderLayout.CENTER);

        controler.setRootContext(rootNode);
//        try {
//            controler.setSelectedNodes(new Node[]{
//                rootNode.getChildren().getNodes()[0].getChildren().getNodes()[0].
//                getChildren().getNodes()[0]});
//        } catch (PropertyVetoException ex) {
//            Exceptions.printStackTrace(ex);
//        }

        ActionMap map = getActionMap();
        map.put("delete", ExplorerUtils.actionDelete(controler, true));

        associateLookup(ExplorerUtils.createLookup(controler, map));

    }

    @Override
    public ExplorerManager getExplorerManager() {
        return controler;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
//        WindowManager.getDefault().findTopComponent("properties").open();
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
}
