/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.harbor.visualizer;

import java.awt.Point;
import java.awt.datatransfer.Transferable;
import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.JScrollPane;
import org.harbor.domain.Ship;
import org.netbeans.api.visual.action.AcceptProvider;
import org.netbeans.api.visual.action.ConnectorState;
import org.netbeans.api.visual.widget.Widget;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.netbeans.api.settings.ConvertAsProperties;
import org.netbeans.api.visual.action.ActionFactory;
import org.netbeans.api.visual.widget.LabelWidget;
import org.netbeans.api.visual.widget.LayerWidget;
import org.netbeans.api.visual.widget.Scene;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.nodes.Node;
import org.openide.nodes.NodeTransfer;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//org.harbor.visualizer//HarborVisualizer//EN",
autostore = false)
@TopComponent.Description(preferredID = "HarborVisualizerTopComponent",
//iconBase="SET/PATH/TO/ICON/HERE", 
persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "output", openAtStartup = true)
@ActionID(category = "Window", id = "org.harbor.visualizer.HarborVisualizerTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(displayName = "#CTL_HarborVisualizerAction",
preferredID = "HarborVisualizerTopComponent")
public final class HarborVisualizerTopComponent extends TopComponent {

    private class ShipAcceptProvider implements AcceptProvider {

        public ShipAcceptProvider() {
        }

        @Override
        public ConnectorState isAcceptable(Widget widget, Point point, Transferable transferable) {
            return ConnectorState.ACCEPT;
        }

        @Override
        public void accept(Widget widget, Point point, Transferable transferable) {
 
Node node = NodeTransfer.node(transferable, NodeTransfer.DND_COPY_OR_MOVE)            ;

Ship ship = node.getLookup().lookup(Ship.class);

LabelWidget labelWidget = new LabelWidget(scene, ship.getType());
labelWidget.setPreferredLocation(point);
labelWidget.getActions().addAction(ActionFactory.createMoveAction());
lw.addChild(labelWidget);
        }
    }
    
    Scene scene = new Scene();
    LayerWidget lw = new LayerWidget(scene);

    public HarborVisualizerTopComponent() {
        initComponents();
        setName(NbBundle.getMessage(HarborVisualizerTopComponent.class, "CTL_HarborVisualizerTopComponent"));
        setToolTipText(NbBundle.getMessage(HarborVisualizerTopComponent.class, "HINT_HarborVisualizerTopComponent"));


        scene.getActions().addAction(ActionFactory.createAcceptAction(new ShipAcceptProvider()));




        scene.addChild(lw);

        jScrollPane1.setViewportView(scene.createView());

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new JScrollPane();

        GroupLayout layout = new GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(Alignment.LEADING)
            .addComponent(jScrollPane1, GroupLayout.DEFAULT_SIZE, 414, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(Alignment.LEADING)
            .addComponent(jScrollPane1, GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
}
