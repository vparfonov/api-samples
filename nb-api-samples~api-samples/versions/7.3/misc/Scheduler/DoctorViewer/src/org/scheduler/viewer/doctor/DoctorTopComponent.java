/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.scheduler.viewer.doctor;

import java.awt.BorderLayout;
import java.beans.IntrospectionException;
import java.util.List;
import javax.swing.Action;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.view.BeanTreeView;
import org.openide.nodes.AbstractNode;
import org.openide.nodes.BeanNode;
import org.openide.nodes.ChildFactory;
import org.openide.nodes.Children;
import org.openide.nodes.Node;
import org.openide.util.Exceptions;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import org.openide.util.lookup.Lookups;
import org.scheduler.model.Doctor;
import org.scheduler.model.ScheduleManager;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//org.scheduler.viewer.doctor//Doctor//EN",
        autostore = false)
@TopComponent.Description(
        preferredID = "DoctorTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "properties", openAtStartup = true)
@ActionID(category = "Window", id = "org.scheduler.viewer.doctor.DoctorTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_DoctorAction",
        preferredID = "DoctorTopComponent")
@Messages({
    "CTL_DoctorAction=Doctor",
    "CTL_DoctorTopComponent=Doctors",
    "HINT_DoctorTopComponent=This is a Doctor window"
})
public final class DoctorTopComponent extends TopComponent implements ExplorerManager.Provider {

    private ExplorerManager em = new ExplorerManager();
    
    public DoctorTopComponent() {
        initComponents();
        setName(Bundle.CTL_DoctorTopComponent());
        setToolTipText(Bundle.HINT_DoctorTopComponent());
        em.setRootContext(new AbstractNode(Children.create(new DoctorChildFactory(), true)));
        setLayout(new BorderLayout());
        final BeanTreeView doctorView = new BeanTreeView();
        doctorView.setRootVisible(false);
        add(doctorView, BorderLayout.CENTER);
    }

    @Override
    public ExplorerManager getExplorerManager() {
        return em;
    }

    private class DoctorChildFactory extends ChildFactory<Doctor> {

        @Override
        protected boolean createKeys(List<Doctor> list) {
            list.addAll(ScheduleManager.getDoctors());
            return true;
        }

        @Override
        protected Node createNodeForKey(Doctor key) {
            DoctorNode node = null;
            try {
                node = new DoctorNode(key);
            } catch (IntrospectionException ex) {
                Exceptions.printStackTrace(ex);
            }
            return node;
        }
        
        private class DoctorNode extends BeanNode<Doctor> {

            public DoctorNode(Doctor bean) throws IntrospectionException {
                super(bean, Children.LEAF, Lookups.singleton(bean));
                setDisplayName(bean.getName());
            }

            @Override
            public Action[] getActions(boolean context) {
                return new Action[]{};
            }

            @Override
            public Action getPreferredAction() {
                return null;
            }
            
        }
        
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
}
