/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package de.damaico.brick.editor;

import com.tinkerforge.BrickletTemperature;
import com.tinkerforge.Device;
import com.tinkerforge.IPConnection.TimeoutException;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.Exceptions;
import org.openide.util.Lookup;
import org.openide.util.LookupEvent;
import org.openide.util.LookupListener;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import org.openide.util.Utilities;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
    dtd = "-//de.damaico.brick.editor//TemperatureEditor//EN",
autostore = false)
@TopComponent.Description(
    preferredID = "TemperatureEditorTopComponent",
//iconBase="SET/PATH/TO/ICON/HERE", 
persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "editor", openAtStartup = true)
@ActionID(category = "Window", id = "de.damaico.brick.editor.TemperatureEditorTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
    displayName = "#CTL_TemperatureEditorAction",
preferredID = "TemperatureEditorTopComponent")
@Messages(
{
    "CTL_TemperatureEditorAction=TemperatureEditor",
    "CTL_TemperatureEditorTopComponent=TemperatureEditor Window",
    "HINT_TemperatureEditorTopComponent=This is a TemperatureEditor window"
})
public final class TemperatureEditorTopComponent extends TopComponent implements LookupListener
{

    Lookup.Result<BrickletTemperature> devices;

    public TemperatureEditorTopComponent()
    {
        initComponents();
        setName(Bundle.CTL_TemperatureEditorTopComponent());
        setToolTipText(Bundle.HINT_TemperatureEditorTopComponent());
        Lookup.getDefault().lookupAll(Device.class);
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of
     * this method is always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        linearBargraph1 = new eu.hansolo.steelseries.gauges.LinearBargraph();

        linearBargraph1.setTitle(org.openide.util.NbBundle.getMessage(TemperatureEditorTopComponent.class, "TemperatureEditorTopComponent.linearBargraph1.title")); // NOI18N
        linearBargraph1.setUnitString(org.openide.util.NbBundle.getMessage(TemperatureEditorTopComponent.class, "TemperatureEditorTopComponent.linearBargraph1.unitString")); // NOI18N

        javax.swing.GroupLayout linearBargraph1Layout = new javax.swing.GroupLayout(linearBargraph1);
        linearBargraph1.setLayout(linearBargraph1Layout);
        linearBargraph1Layout.setHorizontalGroup(
            linearBargraph1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        linearBargraph1Layout.setVerticalGroup(
            linearBargraph1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(linearBargraph1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(linearBargraph1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private eu.hansolo.steelseries.gauges.LinearBargraph linearBargraph1;
    // End of variables declaration//GEN-END:variables

    @Override
    public void componentOpened()
    {
        //Register to the global context and declare your interest
        devices = Utilities.actionsGlobalContext().lookupResult(BrickletTemperature.class);

        devices.addLookupListener(this);
        startListening();
    }

    @Override
    public void componentClosed()
    {
        devices.removeLookupListener(this);
    }

    void writeProperties(java.util.Properties p)
    {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p)
    {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    public void resultChanged(LookupEvent ev)
    {
        startListening();
    }

    private void startListening()
    {
        for (Device device : devices.allInstances())
        {
            ((BrickletTemperature) device).setTemperatureCallbackPeriod(100);
            try
            {
                linearBargraph1.setValue(((BrickletTemperature) device).getTemperature()/100);
            }
            catch (TimeoutException ex)
            {
                Exceptions.printStackTrace(ex);
            }
            
            ((BrickletTemperature) device).addListener(new BrickletTemperature.TemperatureListener()
            {
                @Override
                public void temperature(short temperature)
                {
                    linearBargraph1.setValue(temperature/100);
                }
            });
        }
    }
}
