/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package de.damaico.brick.editor;

import com.tinkerforge.BrickletRotaryPoti;
import com.tinkerforge.BrickletRotaryPoti.PositionListener;
import com.tinkerforge.IPConnection.TimeoutException;
import eu.hansolo.steelseries.gauges.Radial;
import java.awt.BorderLayout;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.Exceptions;
import org.openide.util.Lookup;
import org.openide.util.LookupEvent;
import org.openide.util.LookupListener;
import org.openide.util.NbBundle.Messages;
import org.openide.util.Utilities;
import org.openide.windows.TopComponent;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
    dtd = "-//de.damaico.brick.editor//RotaryPotiEditor//EN",
autostore = false)
@TopComponent.Description(
    preferredID = "RotaryPotiEditorTopComponent",
//iconBase="SET/PATH/TO/ICON/HERE", 
persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "editor", openAtStartup = true)
@ActionID(category = "Window", id = "de.damaico.brick.editor.RotaryPotiEditorTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
    displayName = "#CTL_RotaryPotiEditorAction",
preferredID = "RotaryPotiEditorTopComponent")
@Messages(
{
    "CTL_RotaryPotiEditorAction=RotaryPotiEditor",
    "CTL_RotaryPotiEditorTopComponent=RotaryPotiEditor Window",
    "HINT_RotaryPotiEditorTopComponent=This is a RotaryPotiEditor window"
})
public final class RotaryPotiEditorTopComponent extends TopComponent implements LookupListener
{

    Lookup.Result<BrickletRotaryPoti> devices;
    Radial radial;

    public RotaryPotiEditorTopComponent()
    {
        initComponents();
        setName(Bundle.CTL_RotaryPotiEditorTopComponent());
        setToolTipText(Bundle.HINT_RotaryPotiEditorTopComponent());
        Lookup.getDefault().lookupAll(BrickletRotaryPoti.class);

        setLayout(new BorderLayout());

        radial = new Radial();

        radial.setMinValue(-150.0);
        radial.setMaxValue(150.0);
        
        radial.setTitle("Rotary Poti");
        radial.setUnitString("Position");

        radial.setValue(0);

        add(radial, BorderLayout.CENTER);

    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of
     * this method is always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened()
    {
        //Register to the global context and declare your interest
        devices = Utilities.actionsGlobalContext().lookupResult(BrickletRotaryPoti.class);

        devices.addLookupListener(this);
    }

    @Override
    public void componentClosed()
    {
        devices.removeLookupListener(this);
    }

    void writeProperties(java.util.Properties p)
    {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p)
    {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    public void resultChanged(LookupEvent ev)
    {
        for (final BrickletRotaryPoti device : devices.allInstances())
        {          
            ((BrickletRotaryPoti) device).setPositionCallbackPeriod(100);
            ((BrickletRotaryPoti) device).addListener(new PositionListenerImpl());
        }
    }

    private class PositionListenerImpl implements PositionListener
    {

        public PositionListenerImpl()
        {
        }

        @Override
        public void position(short position)
        {
                radial.setValue(position);
        }
    }
}
